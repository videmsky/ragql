# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EndpointArgs', 'Endpoint']

@pulumi.input_type
class EndpointArgs:
    def __init__(__self__, *,
                 branch_id: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 autoscaling_limit_max_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 autoscaling_limit_min_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 compute_provisioner: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pg_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 pooler_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pooler_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 suspend_timeout_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Endpoint resource.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] compute_provisioner: Provisioner The Neon compute provisioner. Specify the k8s-neonvm provisioner to create a compute endpoint that supports
               Autoscaling.
        :param pulumi.Input[_builtins.bool] disabled: Disable the endpoint.
        :param pulumi.Input[_builtins.bool] pooler_enabled: Activate connection pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] pooler_mode: Mode of connections pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] region_id: Deployment region: https://neon.tech/docs/introduction/regions
        :param pulumi.Input[_builtins.float] suspend_timeout_seconds: Duration of inactivity in seconds after which the compute endpoint is automatically suspended. The value 0 means use the
               global default. The value -1 means never suspend. The default value is 300 seconds (5 minutes). The maximum value is
               604800 seconds (1 week)
        :param pulumi.Input[_builtins.str] type: Access type. **Note** that a single branch can have only one "read_write" endpoint.
        """
        pulumi.set(__self__, "branch_id", branch_id)
        pulumi.set(__self__, "project_id", project_id)
        if autoscaling_limit_max_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_max_cu", autoscaling_limit_max_cu)
        if autoscaling_limit_min_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_min_cu", autoscaling_limit_min_cu)
        if compute_provisioner is not None:
            pulumi.set(__self__, "compute_provisioner", compute_provisioner)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if pg_settings is not None:
            pulumi.set(__self__, "pg_settings", pg_settings)
        if pooler_enabled is not None:
            pulumi.set(__self__, "pooler_enabled", pooler_enabled)
        if pooler_mode is not None:
            pulumi.set(__self__, "pooler_mode", pooler_mode)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if suspend_timeout_seconds is not None:
            pulumi.set(__self__, "suspend_timeout_seconds", suspend_timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> pulumi.Input[_builtins.str]:
        """
        Branch ID.
        """
        return pulumi.get(self, "branch_id")

    @branch_id.setter
    def branch_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "branch_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMaxCu")
    def autoscaling_limit_max_cu(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "autoscaling_limit_max_cu")

    @autoscaling_limit_max_cu.setter
    def autoscaling_limit_max_cu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "autoscaling_limit_max_cu", value)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMinCu")
    def autoscaling_limit_min_cu(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "autoscaling_limit_min_cu")

    @autoscaling_limit_min_cu.setter
    def autoscaling_limit_min_cu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "autoscaling_limit_min_cu", value)

    @_builtins.property
    @pulumi.getter(name="computeProvisioner")
    def compute_provisioner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Provisioner The Neon compute provisioner. Specify the k8s-neonvm provisioner to create a compute endpoint that supports
        Autoscaling.
        """
        return pulumi.get(self, "compute_provisioner")

    @compute_provisioner.setter
    def compute_provisioner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_provisioner", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disable the endpoint.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="pgSettings")
    def pg_settings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "pg_settings")

    @pg_settings.setter
    def pg_settings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pg_settings", value)

    @_builtins.property
    @pulumi.getter(name="poolerEnabled")
    def pooler_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Activate connection pooling. See details: https://neon.tech/docs/connect/connection-pooling
        """
        return pulumi.get(self, "pooler_enabled")

    @pooler_enabled.setter
    def pooler_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pooler_enabled", value)

    @_builtins.property
    @pulumi.getter(name="poolerMode")
    def pooler_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mode of connections pooling. See details: https://neon.tech/docs/connect/connection-pooling
        """
        return pulumi.get(self, "pooler_mode")

    @pooler_mode.setter
    def pooler_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pooler_mode", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Deployment region: https://neon.tech/docs/introduction/regions
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="suspendTimeoutSeconds")
    def suspend_timeout_seconds(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Duration of inactivity in seconds after which the compute endpoint is automatically suspended. The value 0 means use the
        global default. The value -1 means never suspend. The default value is 300 seconds (5 minutes). The maximum value is
        604800 seconds (1 week)
        """
        return pulumi.get(self, "suspend_timeout_seconds")

    @suspend_timeout_seconds.setter
    def suspend_timeout_seconds(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "suspend_timeout_seconds", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access type. **Note** that a single branch can have only one "read_write" endpoint.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _EndpointState:
    def __init__(__self__, *,
                 autoscaling_limit_max_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 autoscaling_limit_min_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_provisioner: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 pg_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 pooler_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pooler_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_host: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 suspend_timeout_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Endpoint resources.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] compute_provisioner: Provisioner The Neon compute provisioner. Specify the k8s-neonvm provisioner to create a compute endpoint that supports
               Autoscaling.
        :param pulumi.Input[_builtins.bool] disabled: Disable the endpoint.
        :param pulumi.Input[_builtins.str] host: Endpoint URI.
        :param pulumi.Input[_builtins.bool] pooler_enabled: Activate connection pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] pooler_mode: Mode of connections pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] region_id: Deployment region: https://neon.tech/docs/introduction/regions
        :param pulumi.Input[_builtins.float] suspend_timeout_seconds: Duration of inactivity in seconds after which the compute endpoint is automatically suspended. The value 0 means use the
               global default. The value -1 means never suspend. The default value is 300 seconds (5 minutes). The maximum value is
               604800 seconds (1 week)
        :param pulumi.Input[_builtins.str] type: Access type. **Note** that a single branch can have only one "read_write" endpoint.
        """
        if autoscaling_limit_max_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_max_cu", autoscaling_limit_max_cu)
        if autoscaling_limit_min_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_min_cu", autoscaling_limit_min_cu)
        if branch_id is not None:
            pulumi.set(__self__, "branch_id", branch_id)
        if compute_provisioner is not None:
            pulumi.set(__self__, "compute_provisioner", compute_provisioner)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if pg_settings is not None:
            pulumi.set(__self__, "pg_settings", pg_settings)
        if pooler_enabled is not None:
            pulumi.set(__self__, "pooler_enabled", pooler_enabled)
        if pooler_mode is not None:
            pulumi.set(__self__, "pooler_mode", pooler_mode)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if proxy_host is not None:
            pulumi.set(__self__, "proxy_host", proxy_host)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if suspend_timeout_seconds is not None:
            pulumi.set(__self__, "suspend_timeout_seconds", suspend_timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMaxCu")
    def autoscaling_limit_max_cu(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "autoscaling_limit_max_cu")

    @autoscaling_limit_max_cu.setter
    def autoscaling_limit_max_cu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "autoscaling_limit_max_cu", value)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMinCu")
    def autoscaling_limit_min_cu(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "autoscaling_limit_min_cu")

    @autoscaling_limit_min_cu.setter
    def autoscaling_limit_min_cu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "autoscaling_limit_min_cu", value)

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Branch ID.
        """
        return pulumi.get(self, "branch_id")

    @branch_id.setter
    def branch_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "branch_id", value)

    @_builtins.property
    @pulumi.getter(name="computeProvisioner")
    def compute_provisioner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Provisioner The Neon compute provisioner. Specify the k8s-neonvm provisioner to create a compute endpoint that supports
        Autoscaling.
        """
        return pulumi.get(self, "compute_provisioner")

    @compute_provisioner.setter
    def compute_provisioner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_provisioner", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disable the endpoint.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint URI.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="pgSettings")
    def pg_settings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "pg_settings")

    @pg_settings.setter
    def pg_settings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pg_settings", value)

    @_builtins.property
    @pulumi.getter(name="poolerEnabled")
    def pooler_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Activate connection pooling. See details: https://neon.tech/docs/connect/connection-pooling
        """
        return pulumi.get(self, "pooler_enabled")

    @pooler_enabled.setter
    def pooler_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pooler_enabled", value)

    @_builtins.property
    @pulumi.getter(name="poolerMode")
    def pooler_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mode of connections pooling. See details: https://neon.tech/docs/connect/connection-pooling
        """
        return pulumi.get(self, "pooler_mode")

    @pooler_mode.setter
    def pooler_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pooler_mode", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="proxyHost")
    def proxy_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "proxy_host")

    @proxy_host.setter
    def proxy_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_host", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Deployment region: https://neon.tech/docs/introduction/regions
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="suspendTimeoutSeconds")
    def suspend_timeout_seconds(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Duration of inactivity in seconds after which the compute endpoint is automatically suspended. The value 0 means use the
        global default. The value -1 means never suspend. The default value is 300 seconds (5 minutes). The maximum value is
        604800 seconds (1 week)
        """
        return pulumi.get(self, "suspend_timeout_seconds")

    @suspend_timeout_seconds.setter
    def suspend_timeout_seconds(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "suspend_timeout_seconds", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access type. **Note** that a single branch can have only one "read_write" endpoint.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("neon:index/endpoint:Endpoint")
class Endpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 autoscaling_limit_max_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 autoscaling_limit_min_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_provisioner: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pg_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 pooler_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pooler_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 suspend_timeout_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Endpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] compute_provisioner: Provisioner The Neon compute provisioner. Specify the k8s-neonvm provisioner to create a compute endpoint that supports
               Autoscaling.
        :param pulumi.Input[_builtins.bool] disabled: Disable the endpoint.
        :param pulumi.Input[_builtins.bool] pooler_enabled: Activate connection pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] pooler_mode: Mode of connections pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] region_id: Deployment region: https://neon.tech/docs/introduction/regions
        :param pulumi.Input[_builtins.float] suspend_timeout_seconds: Duration of inactivity in seconds after which the compute endpoint is automatically suspended. The value 0 means use the
               global default. The value -1 means never suspend. The default value is 300 seconds (5 minutes). The maximum value is
               604800 seconds (1 week)
        :param pulumi.Input[_builtins.str] type: Access type. **Note** that a single branch can have only one "read_write" endpoint.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Endpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 autoscaling_limit_max_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 autoscaling_limit_min_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_provisioner: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pg_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 pooler_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pooler_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 suspend_timeout_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointArgs.__new__(EndpointArgs)

            __props__.__dict__["autoscaling_limit_max_cu"] = autoscaling_limit_max_cu
            __props__.__dict__["autoscaling_limit_min_cu"] = autoscaling_limit_min_cu
            if branch_id is None and not opts.urn:
                raise TypeError("Missing required property 'branch_id'")
            __props__.__dict__["branch_id"] = branch_id
            __props__.__dict__["compute_provisioner"] = compute_provisioner
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["pg_settings"] = pg_settings
            __props__.__dict__["pooler_enabled"] = pooler_enabled
            __props__.__dict__["pooler_mode"] = pooler_mode
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["suspend_timeout_seconds"] = suspend_timeout_seconds
            __props__.__dict__["type"] = type
            __props__.__dict__["host"] = None
            __props__.__dict__["proxy_host"] = None
        super(Endpoint, __self__).__init__(
            'neon:index/endpoint:Endpoint',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            autoscaling_limit_max_cu: Optional[pulumi.Input[_builtins.float]] = None,
            autoscaling_limit_min_cu: Optional[pulumi.Input[_builtins.float]] = None,
            branch_id: Optional[pulumi.Input[_builtins.str]] = None,
            compute_provisioner: Optional[pulumi.Input[_builtins.str]] = None,
            disabled: Optional[pulumi.Input[_builtins.bool]] = None,
            host: Optional[pulumi.Input[_builtins.str]] = None,
            pg_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            pooler_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pooler_mode: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            proxy_host: Optional[pulumi.Input[_builtins.str]] = None,
            region_id: Optional[pulumi.Input[_builtins.str]] = None,
            suspend_timeout_seconds: Optional[pulumi.Input[_builtins.float]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Endpoint':
        """
        Get an existing Endpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] compute_provisioner: Provisioner The Neon compute provisioner. Specify the k8s-neonvm provisioner to create a compute endpoint that supports
               Autoscaling.
        :param pulumi.Input[_builtins.bool] disabled: Disable the endpoint.
        :param pulumi.Input[_builtins.str] host: Endpoint URI.
        :param pulumi.Input[_builtins.bool] pooler_enabled: Activate connection pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] pooler_mode: Mode of connections pooling. See details: https://neon.tech/docs/connect/connection-pooling
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] region_id: Deployment region: https://neon.tech/docs/introduction/regions
        :param pulumi.Input[_builtins.float] suspend_timeout_seconds: Duration of inactivity in seconds after which the compute endpoint is automatically suspended. The value 0 means use the
               global default. The value -1 means never suspend. The default value is 300 seconds (5 minutes). The maximum value is
               604800 seconds (1 week)
        :param pulumi.Input[_builtins.str] type: Access type. **Note** that a single branch can have only one "read_write" endpoint.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndpointState.__new__(_EndpointState)

        __props__.__dict__["autoscaling_limit_max_cu"] = autoscaling_limit_max_cu
        __props__.__dict__["autoscaling_limit_min_cu"] = autoscaling_limit_min_cu
        __props__.__dict__["branch_id"] = branch_id
        __props__.__dict__["compute_provisioner"] = compute_provisioner
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["host"] = host
        __props__.__dict__["pg_settings"] = pg_settings
        __props__.__dict__["pooler_enabled"] = pooler_enabled
        __props__.__dict__["pooler_mode"] = pooler_mode
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["proxy_host"] = proxy_host
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["suspend_timeout_seconds"] = suspend_timeout_seconds
        __props__.__dict__["type"] = type
        return Endpoint(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMaxCu")
    def autoscaling_limit_max_cu(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "autoscaling_limit_max_cu")

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMinCu")
    def autoscaling_limit_min_cu(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "autoscaling_limit_min_cu")

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> pulumi.Output[_builtins.str]:
        """
        Branch ID.
        """
        return pulumi.get(self, "branch_id")

    @_builtins.property
    @pulumi.getter(name="computeProvisioner")
    def compute_provisioner(self) -> pulumi.Output[_builtins.str]:
        """
        Provisioner The Neon compute provisioner. Specify the k8s-neonvm provisioner to create a compute endpoint that supports
        Autoscaling.
        """
        return pulumi.get(self, "compute_provisioner")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Disable the endpoint.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint URI.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="pgSettings")
    def pg_settings(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "pg_settings")

    @_builtins.property
    @pulumi.getter(name="poolerEnabled")
    def pooler_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Activate connection pooling. See details: https://neon.tech/docs/connect/connection-pooling
        """
        return pulumi.get(self, "pooler_enabled")

    @_builtins.property
    @pulumi.getter(name="poolerMode")
    def pooler_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Mode of connections pooling. See details: https://neon.tech/docs/connect/connection-pooling
        """
        return pulumi.get(self, "pooler_mode")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="proxyHost")
    def proxy_host(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "proxy_host")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[_builtins.str]:
        """
        Deployment region: https://neon.tech/docs/introduction/regions
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="suspendTimeoutSeconds")
    def suspend_timeout_seconds(self) -> pulumi.Output[_builtins.float]:
        """
        Duration of inactivity in seconds after which the compute endpoint is automatically suspended. The value 0 means use the
        global default. The value -1 means never suspend. The default value is 300 seconds (5 minutes). The maximum value is
        604800 seconds (1 week)
        """
        return pulumi.get(self, "suspend_timeout_seconds")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Access type. **Note** that a single branch can have only one "read_write" endpoint.
        """
        return pulumi.get(self, "type")

