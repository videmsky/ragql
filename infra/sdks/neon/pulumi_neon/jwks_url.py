# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['JwksUrlArgs', 'JwksUrl']

@pulumi.input_type
class JwksUrlArgs:
    def __init__(__self__, *,
                 jwks_url: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 provider_name: pulumi.Input[_builtins.str],
                 role_names: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwks_url_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwt_audience: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a JwksUrl resource.
        :param pulumi.Input[_builtins.str] jwks_url: The URL that lists the JWKS.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] provider_name: The name of the authentication provider.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] role_names: The roles the JWKS should be mapped to.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] jwt_audience: The name of the required JWT Audience to be used.
        """
        pulumi.set(__self__, "jwks_url", jwks_url)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "provider_name", provider_name)
        pulumi.set(__self__, "role_names", role_names)
        if branch_id is not None:
            pulumi.set(__self__, "branch_id", branch_id)
        if jwks_url_id is not None:
            pulumi.set(__self__, "jwks_url_id", jwks_url_id)
        if jwt_audience is not None:
            pulumi.set(__self__, "jwt_audience", jwt_audience)

    @_builtins.property
    @pulumi.getter(name="jwksUrl")
    def jwks_url(self) -> pulumi.Input[_builtins.str]:
        """
        The URL that lists the JWKS.
        """
        return pulumi.get(self, "jwks_url")

    @jwks_url.setter
    def jwks_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "jwks_url", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the authentication provider.
        """
        return pulumi.get(self, "provider_name")

    @provider_name.setter
    def provider_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "provider_name", value)

    @_builtins.property
    @pulumi.getter(name="roleNames")
    def role_names(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The roles the JWKS should be mapped to.
        """
        return pulumi.get(self, "role_names")

    @role_names.setter
    def role_names(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "role_names", value)

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Branch ID.
        """
        return pulumi.get(self, "branch_id")

    @branch_id.setter
    def branch_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "branch_id", value)

    @_builtins.property
    @pulumi.getter(name="jwksUrlId")
    def jwks_url_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "jwks_url_id")

    @jwks_url_id.setter
    def jwks_url_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jwks_url_id", value)

    @_builtins.property
    @pulumi.getter(name="jwtAudience")
    def jwt_audience(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the required JWT Audience to be used.
        """
        return pulumi.get(self, "jwt_audience")

    @jwt_audience.setter
    def jwt_audience(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jwt_audience", value)


@pulumi.input_type
class _JwksUrlState:
    def __init__(__self__, *,
                 branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwks_url: Optional[pulumi.Input[_builtins.str]] = None,
                 jwks_url_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwt_audience: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering JwksUrl resources.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] jwks_url: The URL that lists the JWKS.
        :param pulumi.Input[_builtins.str] jwt_audience: The name of the required JWT Audience to be used.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] provider_name: The name of the authentication provider.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] role_names: The roles the JWKS should be mapped to.
        """
        if branch_id is not None:
            pulumi.set(__self__, "branch_id", branch_id)
        if jwks_url is not None:
            pulumi.set(__self__, "jwks_url", jwks_url)
        if jwks_url_id is not None:
            pulumi.set(__self__, "jwks_url_id", jwks_url_id)
        if jwt_audience is not None:
            pulumi.set(__self__, "jwt_audience", jwt_audience)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)
        if role_names is not None:
            pulumi.set(__self__, "role_names", role_names)

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Branch ID.
        """
        return pulumi.get(self, "branch_id")

    @branch_id.setter
    def branch_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "branch_id", value)

    @_builtins.property
    @pulumi.getter(name="jwksUrl")
    def jwks_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL that lists the JWKS.
        """
        return pulumi.get(self, "jwks_url")

    @jwks_url.setter
    def jwks_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jwks_url", value)

    @_builtins.property
    @pulumi.getter(name="jwksUrlId")
    def jwks_url_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "jwks_url_id")

    @jwks_url_id.setter
    def jwks_url_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jwks_url_id", value)

    @_builtins.property
    @pulumi.getter(name="jwtAudience")
    def jwt_audience(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the required JWT Audience to be used.
        """
        return pulumi.get(self, "jwt_audience")

    @jwt_audience.setter
    def jwt_audience(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "jwt_audience", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the authentication provider.
        """
        return pulumi.get(self, "provider_name")

    @provider_name.setter
    def provider_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provider_name", value)

    @_builtins.property
    @pulumi.getter(name="roleNames")
    def role_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The roles the JWKS should be mapped to.
        """
        return pulumi.get(self, "role_names")

    @role_names.setter
    def role_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "role_names", value)


@pulumi.type_token("neon:index/jwksUrl:JwksUrl")
class JwksUrl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwks_url: Optional[pulumi.Input[_builtins.str]] = None,
                 jwks_url_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwt_audience: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a JwksUrl resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] jwks_url: The URL that lists the JWKS.
        :param pulumi.Input[_builtins.str] jwt_audience: The name of the required JWT Audience to be used.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] provider_name: The name of the authentication provider.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] role_names: The roles the JWKS should be mapped to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JwksUrlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a JwksUrl resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param JwksUrlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JwksUrlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwks_url: Optional[pulumi.Input[_builtins.str]] = None,
                 jwks_url_id: Optional[pulumi.Input[_builtins.str]] = None,
                 jwt_audience: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JwksUrlArgs.__new__(JwksUrlArgs)

            __props__.__dict__["branch_id"] = branch_id
            if jwks_url is None and not opts.urn:
                raise TypeError("Missing required property 'jwks_url'")
            __props__.__dict__["jwks_url"] = jwks_url
            __props__.__dict__["jwks_url_id"] = jwks_url_id
            __props__.__dict__["jwt_audience"] = jwt_audience
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if provider_name is None and not opts.urn:
                raise TypeError("Missing required property 'provider_name'")
            __props__.__dict__["provider_name"] = provider_name
            if role_names is None and not opts.urn:
                raise TypeError("Missing required property 'role_names'")
            __props__.__dict__["role_names"] = role_names
        super(JwksUrl, __self__).__init__(
            'neon:index/jwksUrl:JwksUrl',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            branch_id: Optional[pulumi.Input[_builtins.str]] = None,
            jwks_url: Optional[pulumi.Input[_builtins.str]] = None,
            jwks_url_id: Optional[pulumi.Input[_builtins.str]] = None,
            jwt_audience: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            provider_name: Optional[pulumi.Input[_builtins.str]] = None,
            role_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'JwksUrl':
        """
        Get an existing JwksUrl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] branch_id: Branch ID.
        :param pulumi.Input[_builtins.str] jwks_url: The URL that lists the JWKS.
        :param pulumi.Input[_builtins.str] jwt_audience: The name of the required JWT Audience to be used.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] provider_name: The name of the authentication provider.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] role_names: The roles the JWKS should be mapped to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JwksUrlState.__new__(_JwksUrlState)

        __props__.__dict__["branch_id"] = branch_id
        __props__.__dict__["jwks_url"] = jwks_url
        __props__.__dict__["jwks_url_id"] = jwks_url_id
        __props__.__dict__["jwt_audience"] = jwt_audience
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["provider_name"] = provider_name
        __props__.__dict__["role_names"] = role_names
        return JwksUrl(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Branch ID.
        """
        return pulumi.get(self, "branch_id")

    @_builtins.property
    @pulumi.getter(name="jwksUrl")
    def jwks_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL that lists the JWKS.
        """
        return pulumi.get(self, "jwks_url")

    @_builtins.property
    @pulumi.getter(name="jwksUrlId")
    def jwks_url_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "jwks_url_id")

    @_builtins.property
    @pulumi.getter(name="jwtAudience")
    def jwt_audience(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the required JWT Audience to be used.
        """
        return pulumi.get(self, "jwt_audience")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the authentication provider.
        """
        return pulumi.get(self, "provider_name")

    @_builtins.property
    @pulumi.getter(name="roleNames")
    def role_names(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The roles the JWKS should be mapped to.
        """
        return pulumi.get(self, "role_names")

