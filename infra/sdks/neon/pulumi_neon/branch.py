# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BranchArgs', 'Branch']

@pulumi.input_type
class BranchArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_lsn: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_timestamp: Optional[pulumi.Input[_builtins.float]] = None,
                 protected: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Branch resource.
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] name: Branch name.
        :param pulumi.Input[_builtins.str] parent_id: ID of the branch to check out.
        :param pulumi.Input[_builtins.str] parent_lsn: Log Sequence Number (LSN) horizon for the data to be present in the new branch. See details:
               https://neon.tech/docs/reference/glossary/#lsn
        :param pulumi.Input[_builtins.float] parent_timestamp: Timestamp horizon for the data to be present in the new branch. **Note**: it's defined as Unix epoch.'
        :param pulumi.Input[_builtins.str] protected: Set to 'yes' to activate, 'no' to deactivate explicitly, and omit to keep the default value. Set whether the branch is
               protected.
        """
        pulumi.set(__self__, "project_id", project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if parent_lsn is not None:
            pulumi.set(__self__, "parent_lsn", parent_lsn)
        if parent_timestamp is not None:
            pulumi.set(__self__, "parent_timestamp", parent_timestamp)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Branch name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the branch to check out.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter(name="parentLsn")
    def parent_lsn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Log Sequence Number (LSN) horizon for the data to be present in the new branch. See details:
        https://neon.tech/docs/reference/glossary/#lsn
        """
        return pulumi.get(self, "parent_lsn")

    @parent_lsn.setter
    def parent_lsn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_lsn", value)

    @_builtins.property
    @pulumi.getter(name="parentTimestamp")
    def parent_timestamp(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timestamp horizon for the data to be present in the new branch. **Note**: it's defined as Unix epoch.'
        """
        return pulumi.get(self, "parent_timestamp")

    @parent_timestamp.setter
    def parent_timestamp(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "parent_timestamp", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set to 'yes' to activate, 'no' to deactivate explicitly, and omit to keep the default value. Set whether the branch is
        protected.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protected", value)


@pulumi.input_type
class _BranchState:
    def __init__(__self__, *,
                 logical_size: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_lsn: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_timestamp: Optional[pulumi.Input[_builtins.float]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Branch resources.
        :param pulumi.Input[_builtins.float] logical_size: Branch logical size in MB.
        :param pulumi.Input[_builtins.str] name: Branch name.
        :param pulumi.Input[_builtins.str] parent_id: ID of the branch to check out.
        :param pulumi.Input[_builtins.str] parent_lsn: Log Sequence Number (LSN) horizon for the data to be present in the new branch. See details:
               https://neon.tech/docs/reference/glossary/#lsn
        :param pulumi.Input[_builtins.float] parent_timestamp: Timestamp horizon for the data to be present in the new branch. **Note**: it's defined as Unix epoch.'
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] protected: Set to 'yes' to activate, 'no' to deactivate explicitly, and omit to keep the default value. Set whether the branch is
               protected.
        """
        if logical_size is not None:
            pulumi.set(__self__, "logical_size", logical_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if parent_lsn is not None:
            pulumi.set(__self__, "parent_lsn", parent_lsn)
        if parent_timestamp is not None:
            pulumi.set(__self__, "parent_timestamp", parent_timestamp)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)

    @_builtins.property
    @pulumi.getter(name="logicalSize")
    def logical_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Branch logical size in MB.
        """
        return pulumi.get(self, "logical_size")

    @logical_size.setter
    def logical_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "logical_size", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Branch name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the branch to check out.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter(name="parentLsn")
    def parent_lsn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Log Sequence Number (LSN) horizon for the data to be present in the new branch. See details:
        https://neon.tech/docs/reference/glossary/#lsn
        """
        return pulumi.get(self, "parent_lsn")

    @parent_lsn.setter
    def parent_lsn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_lsn", value)

    @_builtins.property
    @pulumi.getter(name="parentTimestamp")
    def parent_timestamp(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timestamp horizon for the data to be present in the new branch. **Note**: it's defined as Unix epoch.'
        """
        return pulumi.get(self, "parent_timestamp")

    @parent_timestamp.setter
    def parent_timestamp(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "parent_timestamp", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set to 'yes' to activate, 'no' to deactivate explicitly, and omit to keep the default value. Set whether the branch is
        protected.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protected", value)


@pulumi.type_token("neon:index/branch:Branch")
class Branch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_lsn: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_timestamp: Optional[pulumi.Input[_builtins.float]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Branch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Branch name.
        :param pulumi.Input[_builtins.str] parent_id: ID of the branch to check out.
        :param pulumi.Input[_builtins.str] parent_lsn: Log Sequence Number (LSN) horizon for the data to be present in the new branch. See details:
               https://neon.tech/docs/reference/glossary/#lsn
        :param pulumi.Input[_builtins.float] parent_timestamp: Timestamp horizon for the data to be present in the new branch. **Note**: it's defined as Unix epoch.'
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] protected: Set to 'yes' to activate, 'no' to deactivate explicitly, and omit to keep the default value. Set whether the branch is
               protected.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BranchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Branch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BranchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BranchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_lsn: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_timestamp: Optional[pulumi.Input[_builtins.float]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BranchArgs.__new__(BranchArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["parent_lsn"] = parent_lsn
            __props__.__dict__["parent_timestamp"] = parent_timestamp
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["protected"] = protected
            __props__.__dict__["logical_size"] = None
        super(Branch, __self__).__init__(
            'neon:index/branch:Branch',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            logical_size: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_id: Optional[pulumi.Input[_builtins.str]] = None,
            parent_lsn: Optional[pulumi.Input[_builtins.str]] = None,
            parent_timestamp: Optional[pulumi.Input[_builtins.float]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            protected: Optional[pulumi.Input[_builtins.str]] = None) -> 'Branch':
        """
        Get an existing Branch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] logical_size: Branch logical size in MB.
        :param pulumi.Input[_builtins.str] name: Branch name.
        :param pulumi.Input[_builtins.str] parent_id: ID of the branch to check out.
        :param pulumi.Input[_builtins.str] parent_lsn: Log Sequence Number (LSN) horizon for the data to be present in the new branch. See details:
               https://neon.tech/docs/reference/glossary/#lsn
        :param pulumi.Input[_builtins.float] parent_timestamp: Timestamp horizon for the data to be present in the new branch. **Note**: it's defined as Unix epoch.'
        :param pulumi.Input[_builtins.str] project_id: Project ID.
        :param pulumi.Input[_builtins.str] protected: Set to 'yes' to activate, 'no' to deactivate explicitly, and omit to keep the default value. Set whether the branch is
               protected.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BranchState.__new__(_BranchState)

        __props__.__dict__["logical_size"] = logical_size
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["parent_lsn"] = parent_lsn
        __props__.__dict__["parent_timestamp"] = parent_timestamp
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["protected"] = protected
        return Branch(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="logicalSize")
    def logical_size(self) -> pulumi.Output[_builtins.float]:
        """
        Branch logical size in MB.
        """
        return pulumi.get(self, "logical_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Branch name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the branch to check out.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="parentLsn")
    def parent_lsn(self) -> pulumi.Output[_builtins.str]:
        """
        Log Sequence Number (LSN) horizon for the data to be present in the new branch. See details:
        https://neon.tech/docs/reference/glossary/#lsn
        """
        return pulumi.get(self, "parent_lsn")

    @_builtins.property
    @pulumi.getter(name="parentTimestamp")
    def parent_timestamp(self) -> pulumi.Output[_builtins.float]:
        """
        Timestamp horizon for the data to be present in the new branch. **Note**: it's defined as Unix epoch.'
        """
        return pulumi.get(self, "parent_timestamp")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def protected(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set to 'yes' to activate, 'no' to deactivate explicitly, and omit to keep the default value. Set whether the branch is
        protected.
        """
        return pulumi.get(self, "protected")

