# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBranchEndpointsResult',
    'AwaitableGetBranchEndpointsResult',
    'get_branch_endpoints',
    'get_branch_endpoints_output',
]

@pulumi.output_type
class GetBranchEndpointsResult:
    """
    A collection of values returned by getBranchEndpoints.
    """
    def __init__(__self__, branch_id=None, endpoints=None, id=None, project_id=None):
        if branch_id and not isinstance(branch_id, str):
            raise TypeError("Expected argument 'branch_id' to be a str")
        pulumi.set(__self__, "branch_id", branch_id)
        if endpoints and not isinstance(endpoints, list):
            raise TypeError("Expected argument 'endpoints' to be a list")
        pulumi.set(__self__, "endpoints", endpoints)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> _builtins.str:
        return pulumi.get(self, "branch_id")

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.GetBranchEndpointsEndpointResult']]:
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")


class AwaitableGetBranchEndpointsResult(GetBranchEndpointsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBranchEndpointsResult(
            branch_id=self.branch_id,
            endpoints=self.endpoints,
            id=self.id,
            project_id=self.project_id)


def get_branch_endpoints(branch_id: Optional[_builtins.str] = None,
                         endpoints: Optional[Sequence[Union['GetBranchEndpointsEndpointArgs', 'GetBranchEndpointsEndpointArgsDict']]] = None,
                         id: Optional[_builtins.str] = None,
                         project_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBranchEndpointsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['branchId'] = branch_id
    __args__['endpoints'] = endpoints
    __args__['id'] = id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('neon:index/getBranchEndpoints:getBranchEndpoints', __args__, opts=opts, typ=GetBranchEndpointsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBranchEndpointsResult(
        branch_id=pulumi.get(__ret__, 'branch_id'),
        endpoints=pulumi.get(__ret__, 'endpoints'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'))
def get_branch_endpoints_output(branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                                endpoints: Optional[pulumi.Input[Optional[Sequence[Union['GetBranchEndpointsEndpointArgs', 'GetBranchEndpointsEndpointArgsDict']]]]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBranchEndpointsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['branchId'] = branch_id
    __args__['endpoints'] = endpoints
    __args__['id'] = id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('neon:index/getBranchEndpoints:getBranchEndpoints', __args__, opts=opts, typ=GetBranchEndpointsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBranchEndpointsResult(
        branch_id=pulumi.get(__response__, 'branch_id'),
        endpoints=pulumi.get(__response__, 'endpoints'),
        id=pulumi.get(__response__, 'id'),
        project_id=pulumi.get(__response__, 'project_id')))
