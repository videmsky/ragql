# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VpcEndpointAssignmentArgs', 'VpcEndpointAssignment']

@pulumi.input_type
class VpcEndpointAssignmentArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[_builtins.str],
                 org_id: pulumi.Input[_builtins.str],
                 region_id: pulumi.Input[_builtins.str],
                 vpc_endpoint_id: pulumi.Input[_builtins.str],
                 vpc_endpoint_assignment_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VpcEndpointAssignment resource.
        :param pulumi.Input[_builtins.str] label: A descriptive label for the VPC endpoint.
        :param pulumi.Input[_builtins.str] org_id: The Neon organization ID.
        :param pulumi.Input[_builtins.str] region_id: The Neon region ID.
        :param pulumi.Input[_builtins.str] vpc_endpoint_id: The VPC endpoint ID.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        if vpc_endpoint_assignment_id is not None:
            pulumi.set(__self__, "vpc_endpoint_assignment_id", vpc_endpoint_assignment_id)

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Input[_builtins.str]:
        """
        A descriptive label for the VPC endpoint.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Neon organization ID.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Neon region ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC endpoint ID.
        """
        return pulumi.get(self, "vpc_endpoint_id")

    @vpc_endpoint_id.setter
    def vpc_endpoint_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcEndpointAssignmentId")
    def vpc_endpoint_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_endpoint_assignment_id")

    @vpc_endpoint_assignment_id.setter
    def vpc_endpoint_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_endpoint_assignment_id", value)


@pulumi.input_type
class _VpcEndpointAssignmentState:
    def __init__(__self__, *,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_endpoint_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VpcEndpointAssignment resources.
        :param pulumi.Input[_builtins.str] label: A descriptive label for the VPC endpoint.
        :param pulumi.Input[_builtins.str] org_id: The Neon organization ID.
        :param pulumi.Input[_builtins.str] region_id: The Neon region ID.
        :param pulumi.Input[_builtins.str] vpc_endpoint_id: The VPC endpoint ID.
        """
        if label is not None:
            pulumi.set(__self__, "label", label)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if vpc_endpoint_assignment_id is not None:
            pulumi.set(__self__, "vpc_endpoint_assignment_id", vpc_endpoint_assignment_id)
        if vpc_endpoint_id is not None:
            pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A descriptive label for the VPC endpoint.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Neon organization ID.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Neon region ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcEndpointAssignmentId")
    def vpc_endpoint_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_endpoint_assignment_id")

    @vpc_endpoint_assignment_id.setter
    def vpc_endpoint_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_endpoint_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC endpoint ID.
        """
        return pulumi.get(self, "vpc_endpoint_id")

    @vpc_endpoint_id.setter
    def vpc_endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_endpoint_id", value)


@pulumi.type_token("neon:index/vpcEndpointAssignment:VpcEndpointAssignment")
class VpcEndpointAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_endpoint_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a VpcEndpointAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] label: A descriptive label for the VPC endpoint.
        :param pulumi.Input[_builtins.str] org_id: The Neon organization ID.
        :param pulumi.Input[_builtins.str] region_id: The Neon region ID.
        :param pulumi.Input[_builtins.str] vpc_endpoint_id: The VPC endpoint ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcEndpointAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpcEndpointAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcEndpointAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcEndpointAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_endpoint_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcEndpointAssignmentArgs.__new__(VpcEndpointAssignmentArgs)

            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            if region_id is None and not opts.urn:
                raise TypeError("Missing required property 'region_id'")
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["vpc_endpoint_assignment_id"] = vpc_endpoint_assignment_id
            if vpc_endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_endpoint_id'")
            __props__.__dict__["vpc_endpoint_id"] = vpc_endpoint_id
        super(VpcEndpointAssignment, __self__).__init__(
            'neon:index/vpcEndpointAssignment:VpcEndpointAssignment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            org_id: Optional[pulumi.Input[_builtins.str]] = None,
            region_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_endpoint_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VpcEndpointAssignment':
        """
        Get an existing VpcEndpointAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] label: A descriptive label for the VPC endpoint.
        :param pulumi.Input[_builtins.str] org_id: The Neon organization ID.
        :param pulumi.Input[_builtins.str] region_id: The Neon region ID.
        :param pulumi.Input[_builtins.str] vpc_endpoint_id: The VPC endpoint ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcEndpointAssignmentState.__new__(_VpcEndpointAssignmentState)

        __props__.__dict__["label"] = label
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["vpc_endpoint_assignment_id"] = vpc_endpoint_assignment_id
        __props__.__dict__["vpc_endpoint_id"] = vpc_endpoint_id
        return VpcEndpointAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[_builtins.str]:
        """
        A descriptive label for the VPC endpoint.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Neon organization ID.
        """
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Neon region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="vpcEndpointAssignmentId")
    def vpc_endpoint_assignment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vpc_endpoint_assignment_id")

    @_builtins.property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC endpoint ID.
        """
        return pulumi.get(self, "vpc_endpoint_id")

