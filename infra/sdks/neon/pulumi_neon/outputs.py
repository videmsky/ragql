# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ProjectBranch',
    'ProjectDefaultEndpointSettings',
    'ProjectQuota',
    'GetBranchEndpointsEndpointResult',
    'GetBranchRolesRoleResult',
    'GetBranchesBranchResult',
]

@pulumi.output_type
class ProjectBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 role_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str database_name: The name of the default database provisioned upon creation of new project. It's owned by the default role (`role_name`).
               If not specified, the default database name will be used.
        :param _builtins.str id: Branch ID.
        :param _builtins.str name: The name of the default branch provisioned upon creation of new project. 
               If not specified, the default branch name will be used.
        :param _builtins.str role_name: The name of the default role provisioned upon creation of new project.
               If not specified, the default role name will be used.
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[_builtins.str]:
        """
        The name of the default database provisioned upon creation of new project. It's owned by the default role (`role_name`).
        If not specified, the default database name will be used.
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Branch ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the default branch provisioned upon creation of new project. 
        If not specified, the default branch name will be used.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        The name of the default role provisioned upon creation of new project.
        If not specified, the default role name will be used.
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class ProjectDefaultEndpointSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoscalingLimitMaxCu":
            suggest = "autoscaling_limit_max_cu"
        elif key == "autoscalingLimitMinCu":
            suggest = "autoscaling_limit_min_cu"
        elif key == "suspendTimeoutSeconds":
            suggest = "suspend_timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectDefaultEndpointSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectDefaultEndpointSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectDefaultEndpointSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscaling_limit_max_cu: Optional[_builtins.float] = None,
                 autoscaling_limit_min_cu: Optional[_builtins.float] = None,
                 id: Optional[_builtins.str] = None,
                 suspend_timeout_seconds: Optional[_builtins.float] = None):
        """
        :param _builtins.str id: Endpoint ID.
        :param _builtins.float suspend_timeout_seconds: Duration of inactivity in seconds after which the compute endpoint is automatically suspended.
               The value 0 means use the global default.
               The value -1 means never suspend. The default value is 300 seconds (5 minutes).
               The maximum value is 604800 seconds (1 week)
        """
        if autoscaling_limit_max_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_max_cu", autoscaling_limit_max_cu)
        if autoscaling_limit_min_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_min_cu", autoscaling_limit_min_cu)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if suspend_timeout_seconds is not None:
            pulumi.set(__self__, "suspend_timeout_seconds", suspend_timeout_seconds)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMaxCu")
    def autoscaling_limit_max_cu(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "autoscaling_limit_max_cu")

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMinCu")
    def autoscaling_limit_min_cu(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "autoscaling_limit_min_cu")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="suspendTimeoutSeconds")
    def suspend_timeout_seconds(self) -> Optional[_builtins.float]:
        """
        Duration of inactivity in seconds after which the compute endpoint is automatically suspended.
        The value 0 means use the global default.
        The value -1 means never suspend. The default value is 300 seconds (5 minutes).
        The maximum value is 604800 seconds (1 week)
        """
        return pulumi.get(self, "suspend_timeout_seconds")


@pulumi.output_type
class ProjectQuota(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeTimeSeconds":
            suggest = "active_time_seconds"
        elif key == "computeTimeSeconds":
            suggest = "compute_time_seconds"
        elif key == "dataTransferBytes":
            suggest = "data_transfer_bytes"
        elif key == "logicalSizeBytes":
            suggest = "logical_size_bytes"
        elif key == "writtenDataBytes":
            suggest = "written_data_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectQuota. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectQuota.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectQuota.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_time_seconds: Optional[_builtins.float] = None,
                 compute_time_seconds: Optional[_builtins.float] = None,
                 data_transfer_bytes: Optional[_builtins.float] = None,
                 logical_size_bytes: Optional[_builtins.float] = None,
                 written_data_bytes: Optional[_builtins.float] = None):
        """
        :param _builtins.float active_time_seconds: The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
        :param _builtins.float compute_time_seconds: The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
        :param _builtins.float data_transfer_bytes: Total amount of data transferred from all of a project's branches using the proxy.
        :param _builtins.float logical_size_bytes: Limit on the logical size of every project's branch.
        :param _builtins.float written_data_bytes: Total amount of data written to all of a project's branches.
        """
        if active_time_seconds is not None:
            pulumi.set(__self__, "active_time_seconds", active_time_seconds)
        if compute_time_seconds is not None:
            pulumi.set(__self__, "compute_time_seconds", compute_time_seconds)
        if data_transfer_bytes is not None:
            pulumi.set(__self__, "data_transfer_bytes", data_transfer_bytes)
        if logical_size_bytes is not None:
            pulumi.set(__self__, "logical_size_bytes", logical_size_bytes)
        if written_data_bytes is not None:
            pulumi.set(__self__, "written_data_bytes", written_data_bytes)

    @_builtins.property
    @pulumi.getter(name="activeTimeSeconds")
    def active_time_seconds(self) -> Optional[_builtins.float]:
        """
        The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
        """
        return pulumi.get(self, "active_time_seconds")

    @_builtins.property
    @pulumi.getter(name="computeTimeSeconds")
    def compute_time_seconds(self) -> Optional[_builtins.float]:
        """
        The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
        """
        return pulumi.get(self, "compute_time_seconds")

    @_builtins.property
    @pulumi.getter(name="dataTransferBytes")
    def data_transfer_bytes(self) -> Optional[_builtins.float]:
        """
        Total amount of data transferred from all of a project's branches using the proxy.
        """
        return pulumi.get(self, "data_transfer_bytes")

    @_builtins.property
    @pulumi.getter(name="logicalSizeBytes")
    def logical_size_bytes(self) -> Optional[_builtins.float]:
        """
        Limit on the logical size of every project's branch.
        """
        return pulumi.get(self, "logical_size_bytes")

    @_builtins.property
    @pulumi.getter(name="writtenDataBytes")
    def written_data_bytes(self) -> Optional[_builtins.float]:
        """
        Total amount of data written to all of a project's branches.
        """
        return pulumi.get(self, "written_data_bytes")


@pulumi.output_type
class GetBranchEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 id: _builtins.str,
                 proxy_host: _builtins.str,
                 region_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str host: Endpoint URI.
        :param _builtins.str id: Endpoint ID.
        :param _builtins.str region_id: Deployment region: https://neon.tech/docs/introduction/regions
        :param _builtins.str type: Access type.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "proxy_host", proxy_host)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Endpoint URI.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="proxyHost")
    def proxy_host(self) -> _builtins.str:
        return pulumi.get(self, "proxy_host")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Deployment region: https://neon.tech/docs/introduction/regions
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Access type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBranchRolesRoleResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 protected: _builtins.bool):
        """
        :param _builtins.str name: Role name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protected", protected)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Role name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protected(self) -> _builtins.bool:
        return pulumi.get(self, "protected")


@pulumi.output_type
class GetBranchesBranchResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 logical_size: _builtins.float,
                 name: _builtins.str,
                 parent_id: _builtins.str,
                 primary: _builtins.bool):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logical_size", logical_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "primary", primary)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="logicalSize")
    def logical_size(self) -> _builtins.float:
        return pulumi.get(self, "logical_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> _builtins.bool:
        return pulumi.get(self, "primary")


