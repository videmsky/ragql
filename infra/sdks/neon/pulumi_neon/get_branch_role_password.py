# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetBranchRolePasswordResult',
    'AwaitableGetBranchRolePasswordResult',
    'get_branch_role_password',
    'get_branch_role_password_output',
]

@pulumi.output_type
class GetBranchRolePasswordResult:
    """
    A collection of values returned by getBranchRolePassword.
    """
    def __init__(__self__, branch_id=None, id=None, password=None, project_id=None, role_name=None):
        if branch_id and not isinstance(branch_id, str):
            raise TypeError("Expected argument 'branch_id' to be a str")
        pulumi.set(__self__, "branch_id", branch_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if role_name and not isinstance(role_name, str):
            raise TypeError("Expected argument 'role_name' to be a str")
        pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="branchId")
    def branch_id(self) -> _builtins.str:
        return pulumi.get(self, "branch_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> _builtins.str:
        return pulumi.get(self, "role_name")


class AwaitableGetBranchRolePasswordResult(GetBranchRolePasswordResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBranchRolePasswordResult(
            branch_id=self.branch_id,
            id=self.id,
            password=self.password,
            project_id=self.project_id,
            role_name=self.role_name)


def get_branch_role_password(branch_id: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             project_id: Optional[_builtins.str] = None,
                             role_name: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBranchRolePasswordResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['branchId'] = branch_id
    __args__['id'] = id
    __args__['projectId'] = project_id
    __args__['roleName'] = role_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('neon:index/getBranchRolePassword:getBranchRolePassword', __args__, opts=opts, typ=GetBranchRolePasswordResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBranchRolePasswordResult(
        branch_id=pulumi.get(__ret__, 'branch_id'),
        id=pulumi.get(__ret__, 'id'),
        password=pulumi.get(__ret__, 'password'),
        project_id=pulumi.get(__ret__, 'project_id'),
        role_name=pulumi.get(__ret__, 'role_name'))
def get_branch_role_password_output(branch_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    role_name: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBranchRolePasswordResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['branchId'] = branch_id
    __args__['id'] = id
    __args__['projectId'] = project_id
    __args__['roleName'] = role_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('neon:index/getBranchRolePassword:getBranchRolePassword', __args__, opts=opts, typ=GetBranchRolePasswordResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBranchRolePasswordResult(
        branch_id=pulumi.get(__response__, 'branch_id'),
        id=pulumi.get(__response__, 'id'),
        password=pulumi.get(__response__, 'password'),
        project_id=pulumi.get(__response__, 'project_id'),
        role_name=pulumi.get(__response__, 'role_name')))
