# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ProjectBranchArgs',
    'ProjectBranchArgsDict',
    'ProjectDefaultEndpointSettingsArgs',
    'ProjectDefaultEndpointSettingsArgsDict',
    'ProjectQuotaArgs',
    'ProjectQuotaArgsDict',
    'GetBranchEndpointsEndpointArgs',
    'GetBranchEndpointsEndpointArgsDict',
    'GetBranchRolesRoleArgs',
    'GetBranchRolesRoleArgsDict',
]

MYPY = False

if not MYPY:
    class ProjectBranchArgsDict(TypedDict):
        database_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the default database provisioned upon creation of new project. It's owned by the default role (`role_name`).
        If not specified, the default database name will be used.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Branch ID.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the default branch provisioned upon creation of new project. 
        If not specified, the default branch name will be used.
        """
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the default role provisioned upon creation of new project.
        If not specified, the default role name will be used.
        """
elif False:
    ProjectBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectBranchArgs:
    def __init__(__self__, *,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] database_name: The name of the default database provisioned upon creation of new project. It's owned by the default role (`role_name`).
               If not specified, the default database name will be used.
        :param pulumi.Input[_builtins.str] id: Branch ID.
        :param pulumi.Input[_builtins.str] name: The name of the default branch provisioned upon creation of new project. 
               If not specified, the default branch name will be used.
        :param pulumi.Input[_builtins.str] role_name: The name of the default role provisioned upon creation of new project.
               If not specified, the default role name will be used.
        """
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the default database provisioned upon creation of new project. It's owned by the default role (`role_name`).
        If not specified, the default database name will be used.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_name", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Branch ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the default branch provisioned upon creation of new project. 
        If not specified, the default branch name will be used.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the default role provisioned upon creation of new project.
        If not specified, the default role name will be used.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)


if not MYPY:
    class ProjectDefaultEndpointSettingsArgsDict(TypedDict):
        autoscaling_limit_max_cu: NotRequired[pulumi.Input[_builtins.float]]
        autoscaling_limit_min_cu: NotRequired[pulumi.Input[_builtins.float]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Endpoint ID.
        """
        suspend_timeout_seconds: NotRequired[pulumi.Input[_builtins.float]]
        """
        Duration of inactivity in seconds after which the compute endpoint is automatically suspended.
        The value 0 means use the global default.
        The value -1 means never suspend. The default value is 300 seconds (5 minutes).
        The maximum value is 604800 seconds (1 week)
        """
elif False:
    ProjectDefaultEndpointSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectDefaultEndpointSettingsArgs:
    def __init__(__self__, *,
                 autoscaling_limit_max_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 autoscaling_limit_min_cu: Optional[pulumi.Input[_builtins.float]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 suspend_timeout_seconds: Optional[pulumi.Input[_builtins.float]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Endpoint ID.
        :param pulumi.Input[_builtins.float] suspend_timeout_seconds: Duration of inactivity in seconds after which the compute endpoint is automatically suspended.
               The value 0 means use the global default.
               The value -1 means never suspend. The default value is 300 seconds (5 minutes).
               The maximum value is 604800 seconds (1 week)
        """
        if autoscaling_limit_max_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_max_cu", autoscaling_limit_max_cu)
        if autoscaling_limit_min_cu is not None:
            pulumi.set(__self__, "autoscaling_limit_min_cu", autoscaling_limit_min_cu)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if suspend_timeout_seconds is not None:
            pulumi.set(__self__, "suspend_timeout_seconds", suspend_timeout_seconds)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMaxCu")
    def autoscaling_limit_max_cu(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "autoscaling_limit_max_cu")

    @autoscaling_limit_max_cu.setter
    def autoscaling_limit_max_cu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "autoscaling_limit_max_cu", value)

    @_builtins.property
    @pulumi.getter(name="autoscalingLimitMinCu")
    def autoscaling_limit_min_cu(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "autoscaling_limit_min_cu")

    @autoscaling_limit_min_cu.setter
    def autoscaling_limit_min_cu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "autoscaling_limit_min_cu", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="suspendTimeoutSeconds")
    def suspend_timeout_seconds(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Duration of inactivity in seconds after which the compute endpoint is automatically suspended.
        The value 0 means use the global default.
        The value -1 means never suspend. The default value is 300 seconds (5 minutes).
        The maximum value is 604800 seconds (1 week)
        """
        return pulumi.get(self, "suspend_timeout_seconds")

    @suspend_timeout_seconds.setter
    def suspend_timeout_seconds(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "suspend_timeout_seconds", value)


if not MYPY:
    class ProjectQuotaArgsDict(TypedDict):
        active_time_seconds: NotRequired[pulumi.Input[_builtins.float]]
        """
        The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
        """
        compute_time_seconds: NotRequired[pulumi.Input[_builtins.float]]
        """
        The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
        """
        data_transfer_bytes: NotRequired[pulumi.Input[_builtins.float]]
        """
        Total amount of data transferred from all of a project's branches using the proxy.
        """
        logical_size_bytes: NotRequired[pulumi.Input[_builtins.float]]
        """
        Limit on the logical size of every project's branch.
        """
        written_data_bytes: NotRequired[pulumi.Input[_builtins.float]]
        """
        Total amount of data written to all of a project's branches.
        """
elif False:
    ProjectQuotaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectQuotaArgs:
    def __init__(__self__, *,
                 active_time_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 compute_time_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 data_transfer_bytes: Optional[pulumi.Input[_builtins.float]] = None,
                 logical_size_bytes: Optional[pulumi.Input[_builtins.float]] = None,
                 written_data_bytes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        :param pulumi.Input[_builtins.float] active_time_seconds: The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
        :param pulumi.Input[_builtins.float] compute_time_seconds: The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
        :param pulumi.Input[_builtins.float] data_transfer_bytes: Total amount of data transferred from all of a project's branches using the proxy.
        :param pulumi.Input[_builtins.float] logical_size_bytes: Limit on the logical size of every project's branch.
        :param pulumi.Input[_builtins.float] written_data_bytes: Total amount of data written to all of a project's branches.
        """
        if active_time_seconds is not None:
            pulumi.set(__self__, "active_time_seconds", active_time_seconds)
        if compute_time_seconds is not None:
            pulumi.set(__self__, "compute_time_seconds", compute_time_seconds)
        if data_transfer_bytes is not None:
            pulumi.set(__self__, "data_transfer_bytes", data_transfer_bytes)
        if logical_size_bytes is not None:
            pulumi.set(__self__, "logical_size_bytes", logical_size_bytes)
        if written_data_bytes is not None:
            pulumi.set(__self__, "written_data_bytes", written_data_bytes)

    @_builtins.property
    @pulumi.getter(name="activeTimeSeconds")
    def active_time_seconds(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
        """
        return pulumi.get(self, "active_time_seconds")

    @active_time_seconds.setter
    def active_time_seconds(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "active_time_seconds", value)

    @_builtins.property
    @pulumi.getter(name="computeTimeSeconds")
    def compute_time_seconds(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
        """
        return pulumi.get(self, "compute_time_seconds")

    @compute_time_seconds.setter
    def compute_time_seconds(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "compute_time_seconds", value)

    @_builtins.property
    @pulumi.getter(name="dataTransferBytes")
    def data_transfer_bytes(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Total amount of data transferred from all of a project's branches using the proxy.
        """
        return pulumi.get(self, "data_transfer_bytes")

    @data_transfer_bytes.setter
    def data_transfer_bytes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "data_transfer_bytes", value)

    @_builtins.property
    @pulumi.getter(name="logicalSizeBytes")
    def logical_size_bytes(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Limit on the logical size of every project's branch.
        """
        return pulumi.get(self, "logical_size_bytes")

    @logical_size_bytes.setter
    def logical_size_bytes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "logical_size_bytes", value)

    @_builtins.property
    @pulumi.getter(name="writtenDataBytes")
    def written_data_bytes(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Total amount of data written to all of a project's branches.
        """
        return pulumi.get(self, "written_data_bytes")

    @written_data_bytes.setter
    def written_data_bytes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "written_data_bytes", value)


if not MYPY:
    class GetBranchEndpointsEndpointArgsDict(TypedDict):
        host: _builtins.str
        """
        Endpoint URI.
        """
        id: _builtins.str
        """
        Endpoint ID.
        """
        proxy_host: _builtins.str
        region_id: _builtins.str
        """
        Deployment region: https://neon.tech/docs/introduction/regions
        """
        type: _builtins.str
        """
        Access type.
        """
elif False:
    GetBranchEndpointsEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetBranchEndpointsEndpointArgs:
    def __init__(__self__, *,
                 host: _builtins.str,
                 id: _builtins.str,
                 proxy_host: _builtins.str,
                 region_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str host: Endpoint URI.
        :param _builtins.str id: Endpoint ID.
        :param _builtins.str region_id: Deployment region: https://neon.tech/docs/introduction/regions
        :param _builtins.str type: Access type.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "proxy_host", proxy_host)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Endpoint URI.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: _builtins.str):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: _builtins.str):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="proxyHost")
    def proxy_host(self) -> _builtins.str:
        return pulumi.get(self, "proxy_host")

    @proxy_host.setter
    def proxy_host(self, value: _builtins.str):
        pulumi.set(self, "proxy_host", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Deployment region: https://neon.tech/docs/introduction/regions
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: _builtins.str):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Access type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: _builtins.str):
        pulumi.set(self, "type", value)


if not MYPY:
    class GetBranchRolesRoleArgsDict(TypedDict):
        name: _builtins.str
        """
        Role name.
        """
        protected: _builtins.bool
elif False:
    GetBranchRolesRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetBranchRolesRoleArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 protected: _builtins.bool):
        """
        :param _builtins.str name: Role name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protected", protected)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Role name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> _builtins.bool:
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: _builtins.bool):
        pulumi.set(self, "protected", value)


