# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, connection_uri=None, connection_uri_pooler=None, database_host=None, database_host_pooler=None, database_name=None, database_password=None, database_user=None, default_branch_id=None, id=None, name=None):
        if connection_uri and not isinstance(connection_uri, str):
            raise TypeError("Expected argument 'connection_uri' to be a str")
        pulumi.set(__self__, "connection_uri", connection_uri)
        if connection_uri_pooler and not isinstance(connection_uri_pooler, str):
            raise TypeError("Expected argument 'connection_uri_pooler' to be a str")
        pulumi.set(__self__, "connection_uri_pooler", connection_uri_pooler)
        if database_host and not isinstance(database_host, str):
            raise TypeError("Expected argument 'database_host' to be a str")
        pulumi.set(__self__, "database_host", database_host)
        if database_host_pooler and not isinstance(database_host_pooler, str):
            raise TypeError("Expected argument 'database_host_pooler' to be a str")
        pulumi.set(__self__, "database_host_pooler", database_host_pooler)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if database_password and not isinstance(database_password, str):
            raise TypeError("Expected argument 'database_password' to be a str")
        pulumi.set(__self__, "database_password", database_password)
        if database_user and not isinstance(database_user, str):
            raise TypeError("Expected argument 'database_user' to be a str")
        pulumi.set(__self__, "database_user", database_user)
        if default_branch_id and not isinstance(default_branch_id, str):
            raise TypeError("Expected argument 'default_branch_id' to be a str")
        pulumi.set(__self__, "default_branch_id", default_branch_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="connectionUri")
    def connection_uri(self) -> _builtins.str:
        return pulumi.get(self, "connection_uri")

    @_builtins.property
    @pulumi.getter(name="connectionUriPooler")
    def connection_uri_pooler(self) -> _builtins.str:
        return pulumi.get(self, "connection_uri_pooler")

    @_builtins.property
    @pulumi.getter(name="databaseHost")
    def database_host(self) -> _builtins.str:
        return pulumi.get(self, "database_host")

    @_builtins.property
    @pulumi.getter(name="databaseHostPooler")
    def database_host_pooler(self) -> _builtins.str:
        return pulumi.get(self, "database_host_pooler")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="databasePassword")
    def database_password(self) -> _builtins.str:
        return pulumi.get(self, "database_password")

    @_builtins.property
    @pulumi.getter(name="databaseUser")
    def database_user(self) -> _builtins.str:
        return pulumi.get(self, "database_user")

    @_builtins.property
    @pulumi.getter(name="defaultBranchId")
    def default_branch_id(self) -> _builtins.str:
        return pulumi.get(self, "default_branch_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            connection_uri=self.connection_uri,
            connection_uri_pooler=self.connection_uri_pooler,
            database_host=self.database_host,
            database_host_pooler=self.database_host_pooler,
            database_name=self.database_name,
            database_password=self.database_password,
            database_user=self.database_user,
            default_branch_id=self.default_branch_id,
            id=self.id,
            name=self.name)


def get_project(id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('neon:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProjectResult(
        connection_uri=pulumi.get(__ret__, 'connection_uri'),
        connection_uri_pooler=pulumi.get(__ret__, 'connection_uri_pooler'),
        database_host=pulumi.get(__ret__, 'database_host'),
        database_host_pooler=pulumi.get(__ret__, 'database_host_pooler'),
        database_name=pulumi.get(__ret__, 'database_name'),
        database_password=pulumi.get(__ret__, 'database_password'),
        database_user=pulumi.get(__ret__, 'database_user'),
        default_branch_id=pulumi.get(__ret__, 'default_branch_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))
def get_project_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('neon:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProjectResult(
        connection_uri=pulumi.get(__response__, 'connection_uri'),
        connection_uri_pooler=pulumi.get(__response__, 'connection_uri_pooler'),
        database_host=pulumi.get(__response__, 'database_host'),
        database_host_pooler=pulumi.get(__response__, 'database_host_pooler'),
        database_name=pulumi.get(__response__, 'database_name'),
        database_password=pulumi.get(__response__, 'database_password'),
        database_user=pulumi.get(__response__, 'database_user'),
        default_branch_id=pulumi.get(__response__, 'default_branch_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name')))
